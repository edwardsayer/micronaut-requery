plugins {
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "com.github.johnrengelman.shadow" version "4.0.2"
    id "net.ltgt.apt" version "0.21"    
    id "net.ltgt.apt-eclipse" version "0.21"
    id "net.ltgt.apt-idea" version "0.21"
    id "application"
    id "java"
    id "eclipse"
    id "idea"
}

apply plugin:"application"
apply plugin:"java"
apply plugin:"eclipse"

version "0.1"
group "hello.world"

compileJava.options.encoding = 'UTF-8'
if (!JavaVersion.current().java8Compatible) {
    throw new IllegalStateException('''A Haiku:
                                      |  This needs Java 8,
                                      |  You are using something else,
                                      |  Refresh. Try again.'''.stripMargin())
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" } // for plugin id "net.ltgt.apt" version "0.20"
}

dependencyManagement {
    imports {
        mavenBom 'io.micronaut:micronaut-bom:1.1.0'
    }
}

dependencies {
    annotationProcessor "io.requery:requery-processor:1.5.1"
    compile "io.requery:requery:1.5.1"
    
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-inject"
    compile "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-runtime"
    compile "io.micronaut:micronaut-http-server-netty"
    compile "com.mchange:c3p0:0.9.5.2"
    compile "mysql:mysql-connector-java:5.1.39"
    runtime "ch.qos.logback:logback-classic:1.2.3"
    
    compileOnly "io.micronaut:micronaut-inject-java"
    testCompile "junit:junit:4.12"
    testCompile "io.micronaut:micronaut-inject-java"
    testCompile "org.hamcrest:hamcrest-all:1.3"
}

eclipse.jdt.apt.genSrcDir     = file('build/generated/sources/annotationProcessor/java/main')
eclipse.jdt.apt.genTestSrcDir = file('build/generated/sources/annotationProcessor/java/test')

shadowJar {
    mergeServiceFiles()
}

//run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1')
mainClassName = "hello.world.Application"
/*
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}*/

